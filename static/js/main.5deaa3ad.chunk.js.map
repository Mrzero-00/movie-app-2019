{"version":3,"sources":["Movies.js","App.js","serviceWorker.js","index.js"],"names":["MovieList","styled","div","Movies","title","rating","year","genres","summary","poster","url","className","src","alt","map","item","index","key","href","Styled","GlobalStyle","createGlobalStyle","App","state","isLoading","movielist","selectGenre","getMovielist","a","axios","get","movies","data","console","log","setState","selectGenres","e","target","value","dir","this","onChange","class","id","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"syBAGA,IAAMA,EAAYC,IAAOC,IAAV,KAsDAC,MAxBf,YAAwE,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAC9D,OACE,kBAACV,EAAD,CAAWW,UAAU,cACnB,yBAAKA,UAAU,cACb,yBAAKC,IAAKH,EAAQL,MAAOA,EAAOS,IAAKT,IACrC,yBAAKO,UAAU,kBACb,4BAAKP,GACL,4BACGG,EAAOO,KAAI,SAACC,EAAMC,GAAP,OACV,wBAAIC,IAAKD,GAAQD,OAGrB,4BAAKT,GACL,6CAAmBD,GACnB,8BACE,uBAAGa,KAAMR,GAAT,eAIN,uBAAGC,UAAU,WAAWH,K,8pBC/C9B,IAAMW,EAASlB,IAAOC,IAAV,KAiCNkB,EAAcC,YAAH,KA8GFC,E,4MArGbC,MAAQ,CACNC,WAAW,EACXC,UAAW,GACXC,YAAa,I,EAGfC,a,sBAAe,8BAAAC,EAAA,sEAKHC,IAAMC,IAAN,yEAC0D,EAAKP,MAAMG,cANlE,gBAGDK,EAHC,EAEXC,KACEA,KAAQD,OAKZE,QAAQC,IAAIH,GAEZ,EAAKI,SAAS,CACZV,UAAWM,EACXP,WAAW,IAZA,2C,EAgBfY,aAAe,SAACC,GACd,IAAMX,EAAcW,EAAEC,OAAOC,MAC7B,EAAKJ,SAAS,CAAET,cAAaF,WAAW,IACxCS,QAAQO,IAAI,EAAKjB,MAAMG,c,oEAKM,IAAzBe,KAAKlB,MAAMC,WACbiB,KAAKd,iB,+BAIC,IAAD,EAC0Bc,KAAKlB,MAA9BC,EADD,EACCA,UAAWC,EADZ,EACYA,UAEnB,OACE,kBAACN,EAAD,KACE,kBAACC,EAAD,MACA,yBAAKT,UAAU,eACb,yBAAKA,UAAU,eACb,4BAAQA,UAAU,kBAAkB+B,SAAUD,KAAKL,cACjD,0CACA,yCACA,yCACA,0CACA,2CACA,6CACA,6CACA,yCACA,6CACA,2CACA,0CACA,0CACA,yCACA,wCACA,6CACA,2CACA,2CACA,0CACA,4CACA,8CACA,+CACA,yCACA,2CACA,2CACA,6CACA,uCACA,6CACA,2CAIHZ,EACC,0BAAMb,UAAU,WAAhB,cAEA,yBAAKgC,MAAM,cACRlB,EAAUX,KAAI,SAACC,GACd,OACE,kBAAC,EAAD,CACEE,IAAKF,EAAK6B,GACVxC,MAAOW,EAAKX,MACZC,OAAQU,EAAKV,OACbC,KAAMS,EAAKT,KACXC,OAAQQ,EAAKR,OACbC,QAASO,EAAKP,QACdE,IAAKK,EAAKL,IACVD,OAAQM,EAAK8B,+B,GA1FfC,IAAMC,WClCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5deaa3ad.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst MovieList = styled.div`\n  ul {\n    list-style: none;\n    display: flex;\n    padding: 0;\n  }\n  .Movie_Contents {\n    margin-left: 40px;\n  }\n  ul > li {\n    margin-right: 5px;\n    color: #868e96;\n    font-size: 0.8rem;\n  }\n  .Movie_view {\n    width: 30%;\n  }\n\n  .Movie_Line {\n    display: flex;\n  }\n\n  .pharase {\n    width: 95%;\n    margin: 0;\n    margin-left: 10px;\n    margin-top: 30px;\n    margin-bottom: 30px;\n  }\n`;\nfunction Movies({ title, rating, year, genres, summary, poster, url }) {\n  return (\n    <MovieList className=\"Movie_view\">\n      <div className=\"Movie_Line\">\n        <img src={poster} title={title} alt={title} />\n        <div className=\"Movie_Contents\">\n          <h1>{title}</h1>\n          <ul>\n            {genres.map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n          <h4>{year}</h4>\n          <h4>Rating Score: {rating}</h4>\n          <span>\n            <a href={url}>Download</a>\n          </span>\n        </div>\n      </div>\n      <p className=\"pharase\">{summary}</p>\n    </MovieList>\n  );\n}\n\nexport default Movies;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movies from \"./Movies\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nconst Styled = styled.div`\n  .Loading {\n    margin: 0 auto;\n    font-size: 36px;\n    align-contents: center;\n    height: ;\n  }\n\n  .selectGenre {\n    width: 60px;\n    height: 60px;\n  }\n\n  .main_window {\n    width: 100vw;\n    heigth: 100%;\n  }\n\n  .Movie_view {\n    width: 45%;\n    background: #fff;\n    margin: 32px;\n    border-radius: 10px;\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.4);\n  }\n\n  .Movie_list {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n  }\n`;\n\nconst GlobalStyle = createGlobalStyle`\nhtml,\nbody {\n  height: 100%;\n  background: #e9e9e9;\n}\n`;\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movielist: [],\n    selectGenre: \"\",\n  };\n\n  getMovielist = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      `https://yts-proxy.now.sh/list_movies.json?sort_by=rating&genre=${this.state.selectGenre}`\n    ); //비동기 작업을 안해주면 데이터를 읽어오는데 오류발생할 수 있음.\n    console.log(movies);\n\n    this.setState({\n      movielist: movies,\n      isLoading: false,\n    });\n  };\n\n  selectGenres = (e) => {\n    const selectGenre = e.target.value;\n    this.setState({ selectGenre, isLoading: true });\n    console.dir(this.state.selectGenre);\n    //this.getMovielist();\n  };\n\n  componentDidUpdate() {\n    if (this.state.isLoading === true) {\n      this.getMovielist();\n    }\n  }\n\n  render() {\n    const { isLoading, movielist } = this.state;\n\n    return (\n      <Styled>\n        <GlobalStyle />\n        <div className=\"main_window\">\n          <div className=\"selectGenre\">\n            <select className=\"selectGenre_bar\" onChange={this.selectGenres}>\n              <option>Comedy</option>\n              <option>Drama</option>\n              <option>Short</option>\n              <option>Family</option>\n              <option>Romance</option>\n              <option>Talk-Show</option>\n              <option>Animation</option>\n              <option>Music</option>\n              <option>Adventure</option>\n              <option>Fantasy</option>\n              <option>Action</option>\n              <option>Sci-Fi</option>\n              <option>Crime</option>\n              <option>News</option>\n              <option>Game-Show</option>\n              <option>Mystery</option>\n              <option>Musical</option>\n              <option>Horror</option>\n              <option>Thriller</option>\n              <option>Reality-TV</option>\n              <option>Documentary</option>\n              <option>Sport</option>\n              <option>History</option>\n              <option>Western</option>\n              <option>Biography</option>\n              <option>War</option>\n              <option>Film-Noir</option>\n              <option>Adult</option>\n            </select>\n          </div>\n\n          {isLoading ? (\n            <span className=\"Loading\">Loading...</span>\n          ) : (\n            <div class=\"Movie_list\">\n              {movielist.map((item) => {\n                return (\n                  <Movies\n                    key={item.id}\n                    title={item.title}\n                    rating={item.rating}\n                    year={item.year}\n                    genres={item.genres}\n                    summary={item.summary}\n                    url={item.url}\n                    poster={item.medium_cover_image}\n                  />\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </Styled>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}